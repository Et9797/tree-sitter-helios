==================
Literals
==================

testing app

func test() -> ByteArray {
    #123019231af
}

func test() -> Int {
    121390
}

func test() -> Datum {
    Datum {
        a: 10,
        b: "String"
    }
}

func test() -> []Datum {
    []Datum{
        Datum {
            a: 25,
            b: "String"
        },
        Datum {
            a: 10,
            b: "String2"
        }
    }
}

func test() -> Map[String]Int {
    Map[String]Int{
        "String": 5,
        "String2": 10
    }
}

func main() -> Bool {
	true
}

---

(source_file
  (script_purpose
    script_name: (identifier))
  (function_statement
    name: (identifier)
    return_type: (type
      (nonfunc_type
        (bytearray_type)))
    (block
      (literal_expression
        (bytearray_literal))))
  (function_statement
    name: (identifier)
    return_type: (type
      (nonfunc_type
        (int_type)))
    (block
      (literal_expression
        (int_literal))))
  (function_statement
    name: (identifier)
    return_type: (type
      (nonfunc_type
        (ref_type
          name: (identifier))))
    (block
      (literal_expression
        (struct_literal
          struct_identifier: (identifier)
          struct_field: (identifier)
          (literal_expression
            (int_literal))
          struct_field: (identifier)
          (literal_expression
            (string_literal))))))
  (function_statement
    name: (identifier)
    return_type: (type
      (nonfunc_type
        (list_type
          (nonfunc_type
            (ref_type
              name: (identifier))))))
    (block
      (literal_expression
        (list_literal
          (list_type
            (nonfunc_type
              (ref_type
                name: (identifier))))
          (literal_expression
            (struct_literal
              struct_identifier: (identifier)
              struct_field: (identifier)
              (literal_expression
                (int_literal))
              struct_field: (identifier)
              (literal_expression
                (string_literal))))
          (literal_expression
            (struct_literal
              struct_identifier: (identifier)
              struct_field: (identifier)
              (literal_expression
                (int_literal))
              struct_field: (identifier)
              (literal_expression
                (string_literal))))))))
  (function_statement
    name: (identifier)
    return_type: (type
      (nonfunc_type
        (map_type
          (nonfunc_type
            (str_type))
          (nonfunc_type
            (int_type)))))
    (block
      (literal_expression
        (map_literal
          (map_type
            (nonfunc_type
              (str_type))
            (nonfunc_type
              (int_type)))
          (literal_expression
            (string_literal))
          (literal_expression
            (int_literal))
          (literal_expression
            (string_literal))
          (literal_expression
            (int_literal))))))
  (main_function_statement
    return_type: (bool_type)
    (block
      (literal_expression
        (bool_literal)))))


==================
Assignment/Print
==================

testing app

const x: String = 10

func test() -> Bool {
    x: String = "Test";
    y = "Test2";
    print("s");
    print("s");
    print(x);
    print(y);
    true
}


func main() -> Bool {
	true
}

---

(source_file
  (script_purpose
    script_name: (identifier))
  (const_statement
    name: (identifier)
    type: (type
      (nonfunc_type
        (str_type)))
    (literal_expression
      (int_literal)))
  (function_statement
    name: (identifier)
    return_type: (type
      (nonfunc_type
        (bool_type)))
    (block
      (assignment_expression
        name: (identifier)
        type: (type
          (nonfunc_type
            (str_type)))
        (literal_expression
          (string_literal))
        (terminator))
      (assignment_expression
        name: (identifier)
        (literal_expression
          (string_literal))
        (terminator))
      (print_expression
        (literal_expression
          (string_literal))
        (terminator))
      (print_expression
        (literal_expression
          (string_literal))
        (terminator))
      (print_expression
        (value_ref_expression
          name: (identifier))
        (terminator))
      (print_expression
        (value_ref_expression
          name: (identifier))
        (terminator))
      (literal_expression
        (bool_literal))))
  (main_function_statement
    return_type: (bool_type)
    (block
      (literal_expression
        (bool_literal)))))


==================
Switch case
==================

testing app

enum Redeemer {
    Cancel {
		a: Int
		b: Int
	}
    Buy
    Bid
}

const r: Redeemer = Redeemer::Cancel{a: 20, b: 50}
const r: Redeemer = Redeemer::Bid

func test() -> Bool {
    r.switch {
        a: Cancel => {
            print("Cancel");
            true
        },
        Buy => {
            print("Buy");
            true
        },
		  else => {
				str: String = "Bid";
				print(str);
				false
		  }
    }
}

func main() -> Bool {
	true
}

---

(source_file
  (script_purpose
    script_name: (identifier))
  (enum_statement
    name: (identifier)
    (enum_variant
      name: (identifier)
      (data_field
        name: (identifier)
        type: (type
          (nonfunc_type
            (int_type))))
      (data_field
        name: (identifier)
        type: (type
          (nonfunc_type
            (int_type)))))
    (enum_variant
      name: (identifier))
    (enum_variant
      name: (identifier)))
  (const_statement
    name: (identifier)
    type: (type
      (nonfunc_type
        (ref_type
          name: (identifier))))
    (literal_expression
      (struct_literal
        (path_type
          (nonfunc_type
            (ref_type
              name: (identifier)))
          name: (identifier))
        struct_field: (identifier)
        (literal_expression
          (int_literal))
        struct_field: (identifier)
        (literal_expression
          (int_literal)))))
  (const_statement
    name: (identifier)
    type: (type
      (nonfunc_type
        (ref_type
          name: (identifier))))
    (value_path_expression
      (nonfunc_type
        (ref_type
          name: (identifier)))
      name: (identifier)))
  (function_statement
    name: (identifier)
    return_type: (type
      (nonfunc_type
        (bool_type)))
    (block
      (switch_expression
        (value_ref_expression
          name: (identifier))
        (variant_rename
          name: (identifier)
          variant: (identifier))
        (block
          (print_expression
            (literal_expression
              (string_literal))
            (terminator))
          (literal_expression
            (bool_literal)))
        variant: (identifier)
        (block
          (print_expression
            (literal_expression
              (string_literal))
            (terminator))
          (literal_expression
            (bool_literal)))
        variant: (identifier)
        (block
          (assignment_expression
            name: (identifier)
            type: (type
              (nonfunc_type
                (str_type)))
            (literal_expression
              (string_literal))
            (terminator))
          (print_expression
            (value_ref_expression
              name: (identifier))
            (terminator))
          (literal_expression
            (bool_literal))))))
  (main_function_statement
    return_type: (bool_type)
    (block
      (literal_expression
        (bool_literal)))))


==================
If else
==================

testing app

func test() -> Bool {
	if (true) {
		if (true) {
			print("Test");
			true
		} else if (true) {
			true
		} else {
			false
		}
	} else {
		print("Test");
		false	
	}
}

func main() -> Bool {
	true
}

---

(source_file
  (script_purpose
    script_name: (identifier))
  (function_statement
    name: (identifier)
    return_type: (type
      (nonfunc_type
        (bool_type)))
    (block
      (ifelse_expression
        (literal_expression
          (bool_literal))
        (block
          (ifelse_expression
            (literal_expression
              (bool_literal))
            (block
              (print_expression
                (literal_expression
                  (string_literal))
                (terminator))
              (literal_expression
                (bool_literal)))
            (literal_expression
              (bool_literal))
            (block
              (literal_expression
                (bool_literal)))
            (block
              (literal_expression
                (bool_literal)))))
        (block
          (print_expression
            (literal_expression
              (string_literal))
            (terminator))
          (literal_expression
            (bool_literal))))))
  (main_function_statement
    return_type: (bool_type)
    (block
      (literal_expression
        (bool_literal)))))


==================
Call/Member
==================

testing app

enum Redeemer {
    Cancel {
		a: Int
		b: Int
	}
    Buy
    Bid

	func x() -> Bool {
		true
	}
}

struct Datum {
	deadline: Int
}

const r: Redeemer = Redeemer::Cancel{a: 20, b: 50}
const r: Redeemer = Redeemer::Bid
const r: Redeemer = Redeemer::x()
const d: Datum = Datum { 1000 }
const dl: Int = d.deadline
const dl_string: String = d.deadline.show()

func main() -> Bool {
	true
}

---

(source_file
  (script_purpose
    script_name: (identifier))
  (enum_statement
    name: (identifier)
    (enum_variant
      name: (identifier)
      (data_field
        name: (identifier)
        type: (type
          (nonfunc_type
            (int_type))))
      (data_field
        name: (identifier)
        type: (type
          (nonfunc_type
            (int_type)))))
    (enum_variant
      name: (identifier))
    (enum_variant
      name: (identifier))
    (function_statement
      name: (identifier)
      return_type: (type
        (nonfunc_type
          (bool_type)))
      (block
        (literal_expression
          (bool_literal)))))
  (struct_statement
    name: (identifier)
    (data_field
      name: (identifier)
      type: (type
        (nonfunc_type
          (int_type)))))
  (const_statement
    name: (identifier)
    type: (type
      (nonfunc_type
        (ref_type
          name: (identifier))))
    (literal_expression
      (struct_literal
        (path_type
          (nonfunc_type
            (ref_type
              name: (identifier)))
          name: (identifier))
        struct_field: (identifier)
        (literal_expression
          (int_literal))
        struct_field: (identifier)
        (literal_expression
          (int_literal)))))
  (const_statement
    name: (identifier)
    type: (type
      (nonfunc_type
        (ref_type
          name: (identifier))))
    (value_path_expression
      (nonfunc_type
        (ref_type
          name: (identifier)))
      name: (identifier)))
  (const_statement
    name: (identifier)
    type: (type
      (nonfunc_type
        (ref_type
          name: (identifier))))
    (call_expression
      (value_path_expression
        (nonfunc_type
          (ref_type
            name: (identifier)))
        name: (identifier))))
  (const_statement
    name: (identifier)
    type: (type
      (nonfunc_type
        (ref_type
          name: (identifier))))
    (literal_expression
      (struct_literal
        struct_identifier: (identifier)
        (literal_expression
          (int_literal)))))
  (const_statement
    name: (identifier)
    type: (type
      (nonfunc_type
        (int_type)))
    (member_expression
      (value_ref_expression
        name: (identifier))
      name: (identifier)))
  (const_statement
    name: (identifier)
    type: (type
      (nonfunc_type
        (str_type)))
    (call_expression
      (member_expression
        (member_expression
          (value_ref_expression
            name: (identifier))
          name: (identifier))
        name: (identifier))))
  (main_function_statement
    return_type: (bool_type)
    (block
      (literal_expression
        (bool_literal)))))


==================
Binary/Unary
==================

testing app

func test() -> Bool {
	x = a < 10;
	y = -11 >= 99;
	x || y
}

func main() -> Bool {
	true
}

---

(source_file
  (script_purpose
    script_name: (identifier))
  (function_statement
    name: (identifier)
    return_type: (type
      (nonfunc_type
        (bool_type)))
    (block
      (assignment_expression
        name: (identifier)
        (binary_expression
          (value_ref_expression
            name: (identifier))
          (literal_expression
            (int_literal)))
        (terminator))
      (assignment_expression
        name: (identifier)
        (binary_expression
          (unary_expression
            (literal_expression
              (int_literal)))
          (literal_expression
            (int_literal)))
        (terminator))
      (binary_expression
        (value_ref_expression
          name: (identifier))
        (value_ref_expression
          name: (identifier)))))
  (main_function_statement
    return_type: (bool_type)
    (block
      (literal_expression
        (bool_literal)))))
